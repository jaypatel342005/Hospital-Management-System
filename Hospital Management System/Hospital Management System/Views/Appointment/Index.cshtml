@model System.Data.DataTable
@using System.Data
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Appointments Management - Hospital Management System</title>

    <!-- Preload critical resources -->
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" as="style">
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css" as="style">

    <!-- Load critical CSS first -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css" rel="stylesheet">

    <!-- Load non-critical CSS with media query optimization -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" media="print" onload="this.media='all'">

    <!-- Critical inline styles -->
    <link href="~/css/Appoinment.css" rel="stylesheet" />
</head>
<body>
    <div class="main-content">
        <!-- Page Title -->
        <div class="page-title">
            <h1><i class="bi bi-calendar-event"></i> Appointments Management</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")" class="text-decoration-none">Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Appointments</li>
                </ol>
            </nav>
        </div>

        <!-- Stats Cards -->
        <div class="row stats-cards">
            @{
                int totalAppointments = Model?.Rows.Count ?? 0;
                int completedAppointments = 0;
                int ScheduledAppointments = 0;
                int cancelledAppointments = 0;
         

                if (Model != null)
                {
                    foreach (DataRow row in Model.Rows)
                    {
                        string status = row["AppointmentStatus"]?.ToString()?.ToLower() ?? "";
                        switch (status)
                        {
                            case "completed":
                                completedAppointments++;
                                break;
                            case "scheduled":
                                ScheduledAppointments++;
                                break;
                            case "cancelled":
                                cancelledAppointments++;
                                break;
                            
                        }
                    }
                }
            }

            <div class="row  g-3">



                <div class="col-lg-3 col-md-6 col-sm-12">
                    <div class="stats-card">
                        <div class="d-flex align-items-center gap-3">
                            <div class="icon info">
                                <i class="bi bi-calendar-check"></i>
                            </div>
                            <div class="stats-card-content">
                                <h3>@totalAppointments</h3>
                                <p>Total Appointments</p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-3 col-md-6 col-sm-12">
                    <div class="stats-card">
                        <div class="d-flex align-items-center gap-3">
                            <div class="icon success">
                                <i class="bi bi-check2-circle"></i>
                            </div>
                            <div class="stats-card-content">
                                <h3>@completedAppointments</h3>
                                <p>Completed Appointments</p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-3 col-md-6 col-sm-12">
                    <div class="stats-card">
                        <div class="d-flex align-items-center gap-3">
                            <div class="icon primary">
                                <i class="bi bi-clipboard-check"></i>
                            </div>
                            <div class="stats-card-content">
                                <h3>@ScheduledAppointments</h3>
                                <p>Scheduled Appointments</p>
                            </div>
                        </div>
                    </div>
                </div>



                <div class="col-lg-3 col-md-6 col-sm-12">
                    <div class="stats-card">
                        <div class="d-flex align-items-center gap-3">
                            <div class="icon danger">
                                <i class="bi bi-x-circle"></i>
                            </div>
                            <div class="stats-card-content">
                                <h3>@cancelledAppointments</h3>
                                <p>Cancelled Appointments</p>
                            </div>
                        </div>
                    </div>
                </div>

            </div>



            @* <div class="col-lg-3 col-md-6 col-sm-12">
                <div class="stats-card">
                    <div class="icon success">
                        <i class="bi bi-check-circle"></i>
                    </div>
                    <h3>@completedAppointments</h3>
                    <p>Completed</p>
                </div>
            </div> *@
            @* <div class="col-lg-3 col-md-6 col-sm-12">
                <div class="stats-card">
                    <div class="icon warning">
                        <i class="bi bi-clock"></i>
                    </div>
                    <h3>@ScheduledAppointments</h3>
                    <p>Scheduled</p>
                </div>
            </div> *@
        @*     <div class="col-lg-3 col-md-6 col-sm-12">
                <div class="stats-card">
                    <div class="icon danger">
                        <i class="bi bi-x-circle"></i>
                    </div>
                    <h3>@cancelledAppointments</h3>
                    <p>Cancelled</p>
                </div>
            </div>
        </div> *@

        <!-- Filters Section -->
        <div class="filters-section">
            <div class="row align-items-center">
                <div class="col-lg-3 col-md-6 col-sm-12 mb-2">
                    <div class="search-box">
                        <i class="bi bi-search search-icon"></i>
                        <input type="text" class="form-control" id="searchInput" placeholder="Search appointments...">
                    </div>
                </div>
                <div class="col-lg-2 col-md-6 col-sm-12 mb-2">
                    <select class="form-select" id="statusFilter">
                        <option value="">All Status</option>
                        <option value="Scheduled">Scheduled</option>
                        <option value="Completed">Completed</option>
                        <option value="Cancelled">Cancelled</option>
                        <option value="Pending">Pending</option>
                    </select>
                </div>
                <div class="col-lg-2 col-md-6 col-sm-12 mb-2">
                    <select class="form-select" id="doctorFilter">
                        <option value="">All Doctors</option>
                        @if (Model != null)
                        {
                            var doctors = Model.AsEnumerable()
                            .Select(row => new
                            {
                                DoctorID = row["DoctorID"]?.ToString(),
                                DoctorName = row["DoctorName"]?.ToString()
                            })
                            .Where(d => !string.IsNullOrEmpty(d.DoctorName))
                            .GroupBy(d => d.DoctorID)
                            .Select(g => g.First())
                            .Take(50); // Limit to improve performance

                            foreach (var doctor in doctors)
                            {
                                <option value="@doctor.DoctorID">@doctor.DoctorName</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-lg-2 col-md-6 col-sm-12 mb-2">
                    <input type="date" class="form-control" id="dateFilter">
                </div>
                <div class="col-lg-3 col-md-12 col-sm-12 mb-2">
                    <div class="d-flex gap-2">
                        <a href="@Url.Action("AddEdit", "Appointment")" class="btn btn-primary">
                            <i class="bi bi-plus"></i> <span class="d-none d-sm-inline">New Appointment</span>
                        </a>
                        <button class="btn btn-outline-secondary" onclick="exportData()">
                            <i class="bi bi-download"></i> <span class="d-none d-sm-inline">Export</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content Card -->
        <div class="card">
            <div class="card-header d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
                <h5 class="card-title mb-3 mb-md-0">Appointments</h5>
                <div class="view-toggle">
                    <button class="btn btn-outline-primary active" onclick="switchView('list')">
                        <i class="bi bi-list"></i> List View
                    </button>
                    <button class="btn btn-outline-primary" onclick="switchView('calendar')">
                        <i class="bi bi-calendar"></i> Calendar View
                    </button>
                </div>
            </div>
            <div class="card-body p-0">
                <!-- Loading indicator -->
                <div class="loading" id="loadingIndicator">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading appointments...</p>
                </div>

                <!-- List View -->
                <div class="list-view active" id="listView">
                    <!-- Desktop Table View -->
                    <div class="desktop-table">
                        <div class="table-responsive">
                         <table class="table table-striped table-hover datatable" id="appointmentsTable">
        <thead>
            <tr>
                <th>ID</th>
                <th>Patient</th>
                <th>Doctor</th>
                <th>Date & Time</th>
                <th>Status</th>
                <th>Description</th>
                <th>Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="appointmentsTableBody">
            @if (Model != null && Model.Rows.Count > 0)
            {
                int maxRowsToShow = 50;
                int rowCount = 0;

                foreach (DataRow row in Model.Rows)
                {
                    if (rowCount >= maxRowsToShow) break;

                    string status = row["AppointmentStatus"]?.ToString()?.ToLower() ?? "";
                    string badgeClass = status switch
                    {
                        "completed" => "success",
                        "pending" => "warning",
                        "cancelled" => "danger",
                        _ => "primary"
                    };

                    <tr>
                        <td><strong>@row["AppointmentID"]</strong></td>
                        <td>@row["PatientName"]</td>
                        <td>@row["DoctorName"]</td>
                        <td>
                            @if (DateTime.TryParse(row["AppointmentDate"]?.ToString(), out DateTime appointmentDate))
                            {
                                <span class="d-block d-md-none">@appointmentDate.ToString("dd/MM/yy")</span>
                                <span class="d-none d-md-block">@appointmentDate.ToString("dd/MM/yyyy hh:mm tt")</span>
                            }
                            else
                            {
                                @row["AppointmentDate"]
                            }
                        </td>
                        <td>
                            <span class="badge bg-@badgeClass">@row["AppointmentStatus"]</span>
                        </td>
                        <td>
                            @{
                                string description = row["Description"]?.ToString() ?? "";
                                string truncated = description.Length > 30 ? description.Substring(0, 30) + "..." : description;
                            }
                            <span title="@description">@truncated</span>
                        </td>
                        <td>
                            @if (decimal.TryParse(row["TotalConsultedAmount"]?.ToString(), out decimal amount))
                            {
                                @(Math.Floor(amount).ToString("C0"))
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </td>
                        <td class="text-center">
                            <div class="btn-group btn-group-sm">
                                <a href="@Url.Action("Details", "Appointment", new { id = row["AppointmentID"] })" 
                                   class="btn btn-outline-primary" title="View Details">
                                    <i class="bi bi-eye"></i>
                                </a>
                                <a href="@Url.Action("AddEdit", "Appointment", new { id = row["AppointmentID"] })" 
                                   class="btn btn-outline-warning" title="Edit">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                <button class="btn btn-outline-danger btn-sm"
                                                        onclick="confirmDelete(@row["AppointmentID"])" title="Delete">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                                       
                            </div>
                        </td>
                    </tr>

                    rowCount++;
                }

                if (Model.Rows.Count > maxRowsToShow)
                {
                    <tr id="loadMoreRow">
                        <td colspan="8" class="text-center py-3">
                            <button class="btn btn-outline-primary" onclick="loadMoreAppointments()">
                                Load More (@(Model.Rows.Count - maxRowsToShow) more)
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="8" class="text-center py-4">
                        <i class="bi bi-calendar-x" style="font-size: 2rem; color: var(--light-text);"></i>
                        <p class="mt-2 mb-0">No appointments found</p>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

                    </div>








                    <!-- Mobile Card View -->
                    <div class="mobile-cards" id="mobileCards">
                        @if (Model != null && Model.Rows.Count > 0)
                        {
                            int maxRowsToShow = 50;
                            int rowCount = 0;

                            foreach (DataRow row in Model.Rows)
                            {
                                if (rowCount >= maxRowsToShow) break;

                                string status = row["AppointmentStatus"]?.ToString()?.ToLower() ?? "";
                                string badgeClass = status switch
                                {
                                    "completed" => "bg-success",
                                    "pending" => "bg-warning",
                                    "cancelled" => "bg-danger",
                                    _ => "bg-primary"
                                };

                                <div class="appointment-card">
                                    <div class="appointment-card-header">
                                        <div>
                                            <h6 class="appointment-card-title">@row["PatientName"]</h6>
                                            <small class="text-muted">ID: @row["AppointmentID"]</small>
                                        </div>
                                        <span class="badge @badgeClass">@row["AppointmentStatus"]</span>
                                    </div>
                                    <div class="appointment-card-body">
                                        <div class="appointment-card-item">
                                            <span class="appointment-card-label">Doctor</span>
                                            <span class="appointment-card-value">@row["DoctorName"]</span>
                                        </div>
                                        <div class="appointment-card-item">
                                            <span class="appointment-card-label">Date & Time</span>
                                            <span class="appointment-card-value">
                                                @if (DateTime.TryParse(row["AppointmentDate"]?.ToString(), out DateTime appointmentDate))
                                                {
                                                    @appointmentDate.ToString("dd/MM/yy hh:mm tt")
                                                }
                                                else
                                                {
                                                    @row["AppointmentDate"]
                                                }
                                            </span>
                                        </div>
                                        <div class="appointment-card-item">
                                            <span class="appointment-card-label">Description</span>
                                            <span class="appointment-card-value">
                                                @{
                                                    string description = row["Description"]?.ToString() ?? "";
                                                    string truncatedDescription = description.Length > 40 ? description.Substring(0, 40) + "..." : description;
                                                }
                                                @truncatedDescription
                                            </span>
                                        </div>
                                        <div class="appointment-card-item">
                                            <span class="appointment-card-label">Amount</span>
                                            <span class="appointment-card-value">
                                                @if (decimal.TryParse(row["TotalConsultedAmount"]?.ToString(), out decimal amount))
                                                {
                                                    @amount.ToString("C")
                                                }
                                                else
                                                {
                                                    <span>-</span>
                                                }
                                            </span>
                                        </div>
                                    </div>
                                    <div class="appointment-card-actions">
                                        <a href="@Url.Action("Details", "Appointment", new { id = row["AppointmentID"] })" class="btn btn-sm btn-outline-primary">
                                            <i class="bi bi-eye"></i> View
                                        </a>
                                        <a href="@Url.Action("AddEdit", "Appointment", new { id = row["AppointmentID"] })" class="btn btn-sm btn-outline-warning">
                                            <i class="bi bi-pencil"></i> Edit
                                        </a>
                                         <button class="btn btn-outline-danger btn-sm"
                                                        onclick="confirmDelete(@row["AppointmentID"])" title="Delete">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                    </div>
                                </div>
                                rowCount++;
                            }
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-calendar-x" style="font-size: 2rem; color: var(--light-text);"></i>
                                <p class="mt-2 mb-0">No appointments found</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Calendar View -->
                <div class="calendar-view" id="calendarView">
                    <div id="calendar"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>


    <!-- Load JavaScript after DOM content -->
    <script>








         window.onload = function () {
            @if (TempData["SuccessMessage"] != null)
            {
                    <text>
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: '@TempData["SuccessMessage"]'
                    });
                    </text>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                    <text>
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: '@TempData["ErrorMessage"]'
                    });
                    </text>
            }
        };

            function confirmDelete(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "Do you really want to delete this department?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = `/Appointment/AppointmentDelete?AppointmentID=${id}`;
                }
            });
        }





        // Store appointment data for JavaScript processing
        let appointmentsData = [];
        let allAppointments = [];
        let currentPage = 1;
        let pageSize = 50;
        let calendar;

        @if (Model != null && Model.Rows.Count > 0)
        {
                <text>
                allAppointments = [
                    @for (int i = 0; i < Model.Rows.Count; i++)
                    {
                            DataRow row = Model.Rows[i];
                            var appointmentDate = row["AppointmentDate"];
                            var dateString = "";
                            if (appointmentDate != null && DateTime.TryParse(appointmentDate.ToString(), out DateTime parsedDate))
                            {
                                    dateString = parsedDate.ToString("yyyy-MM-ddTHH:mm:ss");
                            }

                            <text>
                            {
                                id: '@row["AppointmentID"]',
                                patientName: @Html.Raw(Json.Serialize(row["PatientName"]?.ToString() ?? "")),
                                doctorName: @Html.Raw(Json.Serialize(row["DoctorName"]?.ToString() ?? "")),
                                appointmentDate: '@dateString',
                                status: @Html.Raw(Json.Serialize(row["AppointmentStatus"]?.ToString() ?? "")),
                                description: @Html.Raw(Json.Serialize(row["Description"]?.ToString() ?? "")),
                                amount: '@(row["TotalConsultedAmount"]?.ToString() ?? "0")'
                            }@(i == Model.Rows.Count - 1 ? "" : ",")
                            </text>
                    }
                ];
                </text>
        }

        // Initialize page when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            initializePage();
        });

        function initializePage() {
            setupEventListeners();
            loadCalendarResources();
            // Convert appointments data to calendar format
            convertAppointmentsToCalendarFormat();
        }

        function convertAppointmentsToCalendarFormat() {
            appointmentsData = allAppointments.map(appointment => {
                if (!appointment.appointmentDate) {
                    console.warn('Appointment missing date:', appointment);
                    return null;
                }

                const appointmentDateTime = new Date(appointment.appointmentDate);
                if (isNaN(appointmentDateTime.getTime())) {
                    console.warn('Invalid date for appointment:', appointment);
                    return null;
                }

                // Get status color
                const statusColors = {
                    'completed': '#198754',
                    'pending': '#ffc107',
                    'cancelled': '#dc3545',
                    'scheduled': '#4154f1'
                };

                const status = appointment.status.toLowerCase();
                const backgroundColor = statusColors[status] || statusColors['scheduled'];
                const textColor = status === 'pending' ? '#000' : '#fff';

                return {
                    id: appointment.id,
                    title: `${appointment.patientName} - ${appointment.doctorName}`,
                    start: appointmentDateTime.toISOString(),
                    backgroundColor: backgroundColor,
                    borderColor: backgroundColor,
                    textColor: textColor,
                    extendedProps: {
                        patientName: appointment.patientName,
                        doctorName: appointment.doctorName,
                        status: appointment.status,
                        description: appointment.description,
                        amount: appointment.amount ? `$${appointment.amount}` : ''
                    }
                };
            }).filter(event => event !== null);

            console.log('Converted appointments for calendar:', appointmentsData);
        }

        function setupEventListeners() {
            // Search functionality with debounce
            let searchTimeout;
            document.getElementById('searchInput').addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(filterTable, 300);
            });

            // Filter functionality
            document.getElementById('statusFilter').addEventListener('change', filterTable);
            document.getElementById('doctorFilter').addEventListener('change', filterTable);
            document.getElementById('dateFilter').addEventListener('change', filterTable);
        }

        function loadCalendarResources() {
            // Load FullCalendar CSS
            const calendarCSS = document.createElement('link');
            calendarCSS.rel = 'stylesheet';
            calendarCSS.href = 'https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/6.1.8/index.min.css';
            document.head.appendChild(calendarCSS);

            // Load FullCalendar JS
            const calendarJS = document.createElement('script');
            calendarJS.src = 'https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/6.1.8/index.global.min.js';
            calendarJS.onload = function() {
                console.log('FullCalendar loaded successfully');
            };
            document.head.appendChild(calendarJS);
        }

        function switchView(viewType) {
            const listView = document.getElementById('listView');
            const calendarView = document.getElementById('calendarView');
            const listBtn = document.querySelector('.view-toggle button:first-child');
            const calendarBtn = document.querySelector('.view-toggle button:last-child');

            if (viewType === 'list') {
                listView.style.display = 'block';
                calendarView.style.display = 'none';
                listBtn.classList.add('active');
                calendarBtn.classList.remove('active');
            } else {
                listView.style.display = 'none';
                calendarView.style.display = 'block';
                listBtn.classList.remove('active');
                calendarBtn.classList.add('active');

                // Initialize calendar on demand
                if (!calendar) {
                    // Wait for FullCalendar to load
                    const checkFullCalendar = setInterval(() => {
                        if (typeof FullCalendar !== 'undefined') {
                            clearInterval(checkFullCalendar);
                            initializeCalendar();
                        }
                    }, 100);
                } else {
                    // Refresh calendar events
                    calendar.removeAllEvents();
                    calendar.addEventSource(appointmentsData);
                }
            }
        }

        function initializeCalendar() {
            const calendarEl = document.getElementById('calendar');

            if (!calendarEl) {
                console.error('Calendar element not found');
                return;
            }

            console.log('Initializing calendar with events:', appointmentsData);

            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                height: 'auto',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                events: appointmentsData,
                eventClick: function(info) {
                    showAppointmentDetails(info.event);
                },
                eventDidMount: function(info) {
                    // Events are already styled via backgroundColor and textColor
                    const element = info.el;
                    element.style.borderRadius = '6px';
                    element.style.padding = '2px 6px';
                    element.style.fontSize = '0.875rem';
                    element.style.fontWeight = '500';
                    element.style.cursor = 'pointer';
                },
                eventMouseEnter: function(info) {
                    showTooltip(info);
                },
                eventMouseLeave: function(info) {
                    hideTooltip();
                },
                displayEventTime: true,
                eventTimeFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: true
                }
            });

            try {
                calendar.render();
                console.log('Calendar rendered successfully with', appointmentsData.length, 'events');
            } catch (error) {
                console.error('Error rendering calendar:', error);
            }
        }

        function showTooltip(info) {
            hideTooltip(); // Remove any existing tooltip

            const tooltip = document.createElement('div');
            tooltip.className = 'calendar-tooltip';
            tooltip.id = 'calendar-tooltip';

            const props = info.event.extendedProps;
            const startTime = info.event.start ? info.event.start.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : 'N/A';

            tooltip.innerHTML = `
                <div><strong>Patient:</strong> ${props.patientName}</div>
                <div><strong>Doctor:</strong> ${props.doctorName}</div>
                <div><strong>Status:</strong> ${props.status}</div>
                <div><strong>Time:</strong> ${startTime}</div>
                ${props.description ? `<div><strong>Description:</strong> ${props.description}</div>` : ''}
                ${props.amount ? `<div><strong>Amount:</strong> ${props.amount}</div>` : ''}
            `;

            document.body.appendChild(tooltip);

            // Position tooltip
            const rect = info.el.getBoundingClientRect();
            const tooltipRect = tooltip.getBoundingClientRect();

            let left = rect.left + (rect.width / 2) - (tooltipRect.width / 2);
            let top = rect.top - tooltipRect.height - 10;

            // Adjust if tooltip goes off screen
            if (left < 10) left = 10;
            if (left + tooltipRect.width > window.innerWidth - 10) {
                left = window.innerWidth - tooltipRect.width - 10;
            }
            if (top < 10) top = rect.bottom + 10;

            tooltip.style.left = left + 'px';
            tooltip.style.top = top + 'px';
        }

        function hideTooltip() {
            const tooltip = document.getElementById('calendar-tooltip');
            if (tooltip) {
                tooltip.remove();
            }
        }

        function showAppointmentDetails(event) {
            const props = event.extendedProps;
            const startTime = event.start ? event.start.toLocaleString() : 'N/A';

            const details = `
                Appointment ID: ${event.id}
                Patient: ${props.patientName}
                Doctor: ${props.doctorName}
                Date & Time: ${startTime}
                Status: ${props.status}
                Description: ${props.description || 'N/A'}
                Amount: ${props.amount || 'N/A'}
            `;

            alert(details);
        }

        function filterTable() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
            const doctorFilter = document.getElementById('doctorFilter').value;
            const dateFilter = document.getElementById('dateFilter').value;

            const tbody = document.getElementById('appointmentsTableBody');
            const rows = tbody.querySelectorAll('tr');

            rows.forEach(row => {
                if (row.id === 'loadMoreRow' || row.cells.length === 1) return;

                const patientName = row.cells[1].textContent.toLowerCase();
                const doctorName = row.cells[2].textContent.toLowerCase();
                const appointmentDate = row.cells[3].textContent;
                const status = row.cells[4].textContent.toLowerCase();
                const description = row.cells[5].textContent.toLowerCase();

                let showRow = true;

                if (searchTerm) {
                    showRow = patientName.includes(searchTerm) ||
                             doctorName.includes(searchTerm) ||
                             description.includes(searchTerm);
                }

                if (statusFilter && showRow) {
                    showRow = status.includes(statusFilter);
                }

                if (dateFilter && showRow) {
                    const filterDate = new Date(dateFilter);
                    const appointmentDateObj = new Date(appointmentDate);
                    showRow = appointmentDateObj.toDateString() === filterDate.toDateString();
                }

                row.style.display = showRow ? '' : 'none';
            });
        }

        function loadMoreAppointments() {
            document.getElementById('loadMoreRow').style.display = 'none';
            // Add logic to load more rows here
        }

        function deleteAppointment(appointmentId) {
            if (confirm('Are you sure you want to delete this appointment?')) {
                // Add delete logic here
                console.log('Deleting appointment:', appointmentId);
            }
        }

        function exportData() {
            const table = document.getElementById('appointmentsTable');
            const rows = Array.from(table.querySelectorAll('tr:not(#loadMoreRow)'));
            const csvContent = rows.map(row => {
                const cells = Array.from(row.querySelectorAll('th, td'));
                return cells.slice(0, -1).map(cell => `"${cell.textContent.trim()}"`).join(',');
            }).join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'appointments_' + new Date().toISOString().split('T')[0] + '.csv';
            a.click();
            URL.revokeObjectURL(url);
        }
    </script>



    <!-- Load remaining CSS asynchronously -->

</body>
</html>