@model System.Data.DataTable
@using System.Data

@{
    ViewData["Title"] = "Patients";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="pagetitle">
    <h1>Patient Management</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Home</a></li>
            <li class="breadcrumb-item active">Patients</li>
        </ol>
    </nav>
</div>

<!-- Statistics Cards -->
<div class="row mb-4">
    <div class="col-xxl-3 col-md-6">
        <div class="card info-card sales-card">
            <div class="card-body">
                <h5 class="card-title">Total Patients</h5>
                <div class="d-flex align-items-center">
                    <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                        <i class="bi bi-people"></i>
                    </div>
                    <div class="ps-3">
                        <h6>@Model.Rows.Count</h6>
                        <span class="text-success small pt-1 fw-bold">All Time</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xxl-3 col-md-6">
        <div class="card info-card revenue-card">
            <div class="card-body">
                <h5 class="card-title">Active Patients</h5>
                <div class="d-flex align-items-center">
                    <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                        <i class="bi bi-person-check"></i>
                    </div>
                    <div class="ps-3">
                        <h6>@Model.AsEnumerable().Count(row => row["IsActive"].ToString().ToLower() == "true")</h6>
                        <span class="text-success small pt-1 fw-bold">Currently Active</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xxl-3 col-md-6">
        <div class="card info-card customers-card">
            <div class="card-body">
                <h5 class="card-title">New This Month</h5>
                <div class="d-flex align-items-center">
                    <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                        <i class="bi bi-person-plus"></i>
                    </div>
                    <div class="ps-3">
                        <h6>@Model.AsEnumerable().Count(row => DateTime.Parse(row["Created"].ToString()).Month == DateTime.Now.Month && DateTime.Parse(row["Created"].ToString()).Year == DateTime.Now.Year)</h6>
                        <span class="text-success small pt-1 fw-bold">This Month</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xxl-3 col-md-6">
        <div class="card info-card">
            <div class="card-body">
                <h5 class="card-title">Avg Age</h5>
                <div class="d-flex align-items-center">
                    <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                        <i class="bi bi-calendar-date"></i>
                    </div>
                    <div class="ps-3">
                        @{
                            var ages = Model.AsEnumerable().Select(row =>
                            {
                                var dob = DateTime.Parse(row["DateOfBirth"].ToString());
                                var age = DateTime.Today.Year - dob.Year;
                                if (dob.Date > DateTime.Today.AddYears(-age)) age--;
                                return age;
                            }).ToList();
                            var avgAge = ages.Any() ? ages.Average() : 0;
                        }
                        <h6>@Math.Round(avgAge, 0) Years</h6>
                        <span class="text-muted small pt-1 fw-bold">Average</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<section class="section">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <!-- Header Section -->
                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
                        <h5 class="card-title mb-3 mb-md-0">Patient List</h5>
                        <div class="d-flex flex-column flex-sm-row gap-2">
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addPatientModal">
                                <i class="bi bi-plus-circle"></i>
                                <span class="d-none d-sm-inline">Add New Patient</span>
                                <span class="d-inline d-sm-none">Add</span>
                            </button>

                            <button class="btn btn-success" onclick="exportPatients()">
                                <i class="bi bi-download"></i>
                                <span class="d-none d-sm-inline">Export</span>
                            </button>
                            <button class="btn btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#filterSection">
                                <i class="bi bi-funnel"></i>
                                <span class="d-none d-sm-inline">Filter</span>
                            </button>
                        </div>
                    </div>

                    <!-- Filter Section (Collapsible) -->
                    <div class="collapse" id="filterSection">
                        <div class="card card-body bg-light mb-3">
                            <div class="row g-3">
                                <div class="col-md-4">
                                    <label for="searchInput" class="form-label">Search</label>
                                    <input type="text" class="form-control" id="searchInput" placeholder="Search by name, email, phone, or city...">
                                </div>
                                <div class="col-md-2">
                                    <label for="genderFilter" class="form-label">Gender</label>
                                    <select class="form-select" id="genderFilter">
                                        <option value="">All Genders</option>
                                        <option value="Male">Male</option>
                                        <option value="Female">Female</option>
                                        <option value="Other">Other</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <label for="statusFilter" class="form-label">Status</label>
                                    <select class="form-select" id="statusFilter">
                                        <option value="">All Status</option>
                                        <option value="Active">Active</option>
                                        <option value="Inactive">Inactive</option>
                                    </select>
                                </div>
                                <div class="col-md-2 d-flex align-items-end">
                                    <button class="btn btn-outline-secondary" onclick="clearFilters()">
                                        <i class="bi bi-x-circle"></i> Clear
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>


                    <!-- Mobile Cards View (Hidden on larger screens) -->
                    <div class="d-block d-lg-none">
                        <div class="row" id="mobileCards">
                            @foreach (DataRow dataRow in Model.Rows)
                            {
                                var age = DateTime.Today.Year - DateTime.Parse(dataRow["DateOfBirth"].ToString()).Year;
                                if (DateTime.Parse(dataRow["DateOfBirth"].ToString()).Date > DateTime.Today.AddYears(-age)) age--;

                                <div class="col-12 col-md-6 mb-3">
                                    <div class="card h-100 patient-card">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <h6 class="card-title text-primary">@dataRow["Name"]</h6>
                                                <span class="badge bg-@(dataRow["IsActive"].ToString().ToLower() == "true" ? "success" : "danger")">
                                                    @(dataRow["IsActive"].ToString().ToLower() == "true" ? "Active" : "Inactive")
                                                </span>
                                            </div>
                                            <p class="card-text text-muted small mb-2">
                                                <strong>ID:</strong> @dataRow["PatientID"] |
                                                <strong>Age:</strong> @age |
                                                <span class="badge bg-primary">@dataRow["Gender"]</span>
                                            </p>
                                            <div class="mb-3">
                                                <div class="row text-muted small">
                                                    <div class="col-12 mb-1">
                                                        <i class="bi bi-envelope"></i> @dataRow["Email"]
                                                    </div>
                                                    <div class="col-12 mb-1">
                                                        <i class="bi bi-telephone"></i> @dataRow["Phone"]
                                                    </div>
                                                    <div class="col-12 mb-1">
                                                        <i class="bi bi-house"></i> @dataRow["Address"]
                                                    </div>
                                                    <div class="col-12 mb-1">
                                                        <i class="bi bi-geo-alt"></i> @dataRow["City"], @dataRow["State"]
                                                    </div>
                                                    <div class="col-12">
                                                        <i class="bi bi-calendar-plus"></i> @DateTime.Parse(dataRow["Created"].ToString()).ToString("MMM dd, yyyy")
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="d-flex gap-1 flex-wrap">
                                                <button class="btn btn-outline-info btn-sm" onclick="viewPatient(@dataRow["PatientID"])">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                                <button class="btn btn-outline-primary btn-sm" onclick="editPatient(@dataRow["PatientID"])">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button class="btn btn-outline-success btn-sm" onclick="viewMedicalHistory(@dataRow["PatientID"])">
                                                    <i class="bi bi-file-medical"></i>
                                                </button>
                                                <button class="btn btn-outline-warning btn-sm" onclick="bookAppointment(@dataRow["PatientID"])">
                                                    <i class="bi bi-calendar-plus"></i>
                                                </button>
                                                <button class="btn btn-outline-danger btn-sm" onclick="confirmDelete(@dataRow["PatientID"])">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Desktop Table View -->
                    <div class="d-none d-lg-block">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover datatable" id="patientsTable">
                                <thead>
                                    <tr>
                                        <th class="">ID</th>
                                        <th class="">Patient Name</th>
                                        <th class="">Gender</th>
                                        <th class="">Age</th>
                                        <th class="">Email</th>
                                        <th class="">Phone</th>
                                        <th class="">City</th>
                                        <th class="">Address</th>
                                        <th class="">State</th>
                                        <th class="">Status</th>
                                        <th class="">Registered</th>
                                        <th class="">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (DataRow dataRow in Model.Rows)
                                    {
                                        var age = DateTime.Today.Year - DateTime.Parse(dataRow["DateOfBirth"].ToString()).Year;
                                        if (DateTime.Parse(dataRow["DateOfBirth"].ToString()).Date > DateTime.Today.AddYears(-age)) age--;
                                        <tr>
                                            <td><strong>@dataRow["PatientID"]</strong></td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="avatar-sm bg-light rounded-circle me-2">
                                                        <span class="avatar-title text-primary">
                                                            @dataRow["Name"].ToString().Substring(0, 1).ToUpper()
                                                        </span>
                                                    </div>
                                                    <div class="fw-bold text-truncate" style="max-width: 180px;" title="@dataRow["Name"]">
                                                        @dataRow["Name"]
                                                    </div>
                                                </div>
                                            </td>
                                            <td><span class="badge bg-primary">@dataRow["Gender"]</span></td>
                                            <td>@age</td>
                                            <td>
                                                <span class="text-truncate d-inline-block" style="max-width: 150px;" title="@dataRow["Email"]">
                                                    @dataRow["Email"]
                                                </span>
                                            </td>
                                            <td>@dataRow["Phone"]</td>
                                            <td>@dataRow["City"]</td>
                                            <td class="align-middle">
                                                <span class="text-truncate d-inline-block" style="max-width: 230px;" title="@dataRow["Address"]">
                                                    @dataRow["Address"]
                                                </span>
                                            </td>
                                            <td>@dataRow["State"]</td>
                                            <td>
                                                <span class="badge bg-@(dataRow["IsActive"].ToString().ToLower() == "true" ? "success" : "danger")">
                                                    @(dataRow["IsActive"].ToString().ToLower() == "true" ? "Active" : "Inactive")
                                                </span>
                                            </td>
                                            <td>
                                                <small class="text-muted">
                                                    @DateTime.Parse(dataRow["Created"].ToString()).ToString("MMM dd, yyyy")
                                                </small>
                                            </td>
                                            <td class="text-center">
                                                <div class="dropdown">
                                                    <button class="btn btn-outline-primary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                        <i class="bi bi-three-dots-vertical"></i>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li>
                                                            <a class="dropdown-item" href="#" onclick="viewPatient(@dataRow["PatientID"])">
                                                                <i class="bi bi-eye"></i> View Details
                                                            </a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#" onclick="editPatient(@dataRow["PatientID"])">
                                                                <i class="bi bi-pencil"></i> Edit
                                                            </a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#" onclick="viewMedicalHistory(@dataRow["PatientID"])">
                                                                <i class="bi bi-file-medical"></i> Medical History
                                                            </a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item" href="#" onclick="bookAppointment(@dataRow["PatientID"])">
                                                                <i class="bi bi-calendar-plus"></i> Book Appointment
                                                            </a>
                                                        </li>
                                                        <li><hr class="dropdown-divider"></li>
                                                        <li>
                                                            <a class="dropdown-item text-danger" href="#" onclick="confirmDelete(@dataRow["PatientID"])">
                                                                <i class="bi bi-trash"></i> Delete
                                                            </a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Empty State -->
                    @if (Model.Rows.Count == 0)
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-people display-1 text-muted"></i>
                            <h4 class="mt-3">No Patients Found</h4>
                            <p class="text-muted">Get started by adding your first patient to the system.</p>
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addPatientModal">
                                <i class="bi bi-plus-circle"></i> Add Patient
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>



<!-- Custom Styles -->
@SectionWriters Styles {
<link href="~/css/Patient.css" rel="stylesheet" />
}


@section Scripts {


    <script src="@Url.Content("~/js/Patient.js")"></script>




    <script>
        // Document ready
        window.onload = function () {
             @if (TempData["SuccessMessage"] != null)
             {
                             <text>
                             Swal.fire({
                                 icon: 'success',
                                 title: 'Success',
                                 text: '@TempData["SuccessMessage"]'
                             });
                             </text>
             }

             @if (TempData["ErrorMessage"] != null)
             {
                             <text>
                             Swal.fire({
                                 icon: 'error',
                                 title: 'Error',
                                 text: '@TempData["ErrorMessage"]'
                             });
                             </text>
             }
         };

             function confirmDelete(patientId) {
             Swal.fire({
                 title: 'Are you sure?',
                 text: "Do you really want to delete this department?",
                 icon: 'warning',
                 showCancelButton: true,
                 confirmButtonColor: '#d33',
                 cancelButtonColor: '#6c757d',
                 confirmButtonText: 'Yes, delete it!'
             }).then((result) => {
                 if (result.isConfirmed) {
                     window.location.href = `/Patient/PatientDelete?PatientID=${patientId}`;
                 }
             });
         }



        // Other functions (implement as needed)
        function viewPatient(patientId) {
            window.location.href = `/Patient/PatientDetails?PatientID=${patientId}`;
        }

        function editPatient(patientId) {
            window.location.href = `/Patient/PatientEdit?PatientID=${patientId}`;
        }

        function viewMedicalHistory(patientId) {
            window.location.href = `/Patient/MedicalHistory?PatientID=${patientId}`;
        }

        function bookAppointment(patientId) {
            window.location.href = `/Appointment/BookAppointment?PatientID=${patientId}`;
        }




function exportPatients() {
    const table = document.getElementById('patientsTable');
    if (!table) {
        
        const cards = document.querySelectorAll('.patient-card');
        if (cards.length === 0) {
            alert('No patients to export');
            return;
        }
        exportFromCards(cards);
        return;
    }
    
    let csv = '';
    const rows = table.querySelectorAll('tr');
    
    rows.forEach((row, index) => {
        const cols = row.querySelectorAll(index === 0 ? 'th' : 'td');
        const rowData = [];
        
        cols.forEach((col, colIndex) => {
            if (colIndex === cols.length - 1) return; 
            let text = col.textContent.trim();
            text = text.replace(/"/g, '""'); 
            rowData.push(`"${text}"`);
        });
        
        csv += rowData.join(',') + '\n';
    });
    
    downloadCSV(csv, 'patients.csv');
}


function exportFromCards(cards) {
    let csv = 'ID,Name,Gender,Age,Email,Phone,City,Address,State,Status,Registered\n';
    
    cards.forEach(card => {
        const name = card.querySelector('.card-title').textContent.trim();
        const cardText = card.querySelector('.card-text').textContent;
        const id = cardText.match(/ID:\s*(\d+)/)?.[1] || '';
        const age = cardText.match(/Age:\s*(\d+)/)?.[1] || '';
        const gender = card.querySelector('.badge.bg-primary').textContent.trim();
        const status = card.querySelector('.badge.bg-success, .badge.bg-danger').textContent.trim();
        
        const contactInfo = card.querySelectorAll('.text-muted.small .col-12');
        const email = contactInfo[0]?.textContent.replace('✉', '').trim() || '';
        const phone = contactInfo[1]?.textContent.replace('📞', '').trim() || '';
        const address = contactInfo[2]?.textContent.replace('🏠', '').trim() || '';
        const location = contactInfo[3]?.textContent.replace('📍', '').trim() || '';
        const [city, state] = location.split(',').map(s => s.trim());
        const registered = contactInfo[4]?.textContent.replace('📅', '').trim() || '';
        
        csv += `"${id}","${name}","${gender}","${age}","${email}","${phone}","${city || ''}","${address}","${state || ''}","${status}","${registered}"\n`;
    });
    
    downloadCSV(csv, 'patients.csv');
}

function downloadCSV(csv, filename) {
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    link.style.display = 'none';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}


function applyFilters() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const genderFilter = document.getElementById('genderFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    
   
    const tableRows = document.querySelectorAll('#patientsTable tbody tr');
    tableRows.forEach(row => {
        const name = row.children[1].textContent.toLowerCase();
        const gender = row.children[2].textContent.trim();
        const email = row.children[4].textContent.toLowerCase();
        const phone = row.children[5].textContent.toLowerCase();
        const city = row.children[6].textContent.toLowerCase();
        const status = row.children[9].textContent.trim();
        
        const matchesSearch = !searchTerm || 
            name.includes(searchTerm) || 
            email.includes(searchTerm) || 
            phone.includes(searchTerm) || 
            city.includes(searchTerm);
        
        const matchesGender = !genderFilter || gender === genderFilter;
        const matchesStatus = !statusFilter || status === statusFilter;
        
        row.style.display = matchesSearch && matchesGender && matchesStatus ? '' : 'none';
    });
    
    const cards = document.querySelectorAll('.patient-card');
    cards.forEach(card => {
        const name = card.querySelector('.card-title').textContent.toLowerCase();
        const gender = card.querySelector('.badge.bg-primary').textContent.trim();
        const status = card.querySelector('.badge.bg-success, .badge.bg-danger').textContent.trim();
        const cardText = card.textContent.toLowerCase();
        
        const matchesSearch = !searchTerm || cardText.includes(searchTerm);
        const matchesGender = !genderFilter || gender === genderFilter;
        const matchesStatus = !statusFilter || status === statusFilter;
        
        card.parentElement.style.display = matchesSearch && matchesGender && matchesStatus ? '' : 'none';
    });
}

function clearFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('genderFilter').value = '';
    document.getElementById('statusFilter').value = '';
    applyFilters();
}

document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('input', applyFilters);
    }
    
    const genderFilter = document.getElementById('genderFilter');
    if (genderFilter) {
        genderFilter.addEventListener('change', applyFilters);
    }
    
    const statusFilter = document.getElementById('statusFilter');
    if (statusFilter) {
        statusFilter.addEventListener('change', applyFilters);
    }
});



    </script>
}